diff --git a/simsogui/ModelWindow/TasksTab.py b/simsogui/ModelWindow/TasksTab.py
index 0e07af5..0e6ac10 100644
--- a/simsogui/ModelWindow/TasksTab.py
+++ b/simsogui/ModelWindow/TasksTab.py
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 # coding=utf-8
-
+import random
 import re
 from PyQt5.QtCore import Qt
 from PyQt5.QtWidgets import QAbstractItemView, QComboBox, QFileDialog, QHBoxLayout, QHeaderView, QPushButton, QTableWidgetItem, QTableWidget, QWidget
@@ -12,7 +12,7 @@ from ..TaskGenerator import TaskGeneratorDialog
 from .CustomFieldsEditor import CustomFieldsEditor
 
 from simso.core import Task
-from simso.generator.task_generator import gen_arrivals
+from simso.generator.task_generator import gen_arrivals, gen_list_wcets, gen_wcet_deviations
 
 convert_function = {
     'int': int,
@@ -65,22 +65,44 @@ class TasksTab(Tab):
     def generate(self):
         generator = TaskGeneratorDialog(len(self.configuration.proc_info_list))
         if generator.exec_():
+            task_class = generator.get_task_class()
             self._tasks_table.remove_all_tasks()
-            periodic_tasks = generator.get_nb_periodic_tasks()
-            i = 0
-            for ci, pi in generator.taskset:
-                i += 1
-                if i <= periodic_tasks:
-                    task = self.configuration.add_task(
-                        "Task " + str(i), i, period=pi, wcet=ci, deadline=pi)
-                else:
-                    task = self.configuration.add_task(
-                        "Task " + str(i), i, period=pi, wcet=ci, deadline=pi,
-                        task_type="Sporadic",
-                        list_activation_dates=gen_arrivals(
-                            pi, 0, self.configuration.duration_ms))
-
-                self._tasks_table.add_task(task)
+            if task_class == "Generic":
+                periodic_tasks = generator.get_nb_periodic_tasks()
+                i = 0
+                for ci, pi, _ in generator.taskset:
+                    i += 1
+                    if i <= periodic_tasks:
+                        task = self.configuration.add_task(
+                            "Task " + str(i), i, period=pi, wcet=ci, deadline=pi)
+                    else:
+                        task = self.configuration.add_task(
+                            "Task " + str(i), i, period=pi, wcet=ci, deadline=pi,
+                            task_type="Sporadic",
+                            list_activation_dates=gen_arrivals(
+                                pi, 0, self.configuration.duration_ms))
+                    self._tasks_table.add_task(task)
+            else:
+                periodic_tasks = generator.get_mc_nb_tasks()
+                i = 0
+                for ci, pi, crit_level in generator.taskset:
+                    i += 1
+                    if i <= periodic_tasks:
+                        nr_crit_levels = int(generator.get_nr_crit_levels())
+                        wcets = gen_list_wcets(ci, nr_crit_levels, crit_level)
+                        wcet_deviations = gen_wcet_deviations(wcets, nr_crit_levels)
+                        task = self.configuration.add_task(
+                            "Task " + str(i), i, task_class=task_class, period=pi, wcet=ci,
+                            deadline=pi, nr_crit_levels=nr_crit_levels, crit_level=crit_level,
+                            list_wcets=wcets, wcet_deviations=wcet_deviations
+                        )
+                    else:
+                        task = self.configuration.add_task(
+                            "Task " + str(i), i, period=pi, wcet=ci, deadline=pi,
+                            task_type="Sporadic",
+                            list_activation_dates=gen_arrivals(
+                                pi, 0, self.configuration.duration_ms))
+                    self._tasks_table.add_task(task)
 
 
 class TasksButtonBar(AddRemoveButtonBar):
@@ -103,31 +125,38 @@ class TasksTable(QTableWidget):
         self._configuration = configuration
         self.setSelectionBehavior(QAbstractItemView.SelectRows)
 
-        self._header = ["id", "Name", "Task type", "Abort on miss",
+        self._header = ["id", "Name", "Task class", "Task type", "Abort on miss",
                         "Act. Date (ms)", "Period (ms)",
                         "List of Act. dates (ms)", "Deadline (ms)",
                         "WCET (ms)", "ACET (ms)", "ET Std Dev (ms)",
                         "Base CPI", "Instructions", "MIX",
-                        "Stack file", "Preemption cost", "Followed by"]
+                        "Stack file", "Preemption cost", "Followed by",
+                        "Nr. Crit. Levels", "Criticality level",
+                        "List of WCETS (ms)", "List of WCET Deviations(ms)"]
 
         self._dict_header = {
             'id': 0,
             'name': 1,
-            'task_type': 2,
-            'abort': 3,
-            'activation_date': 4,
-            'period': 5,
-            'list_activation_dates': 6,
-            'deadline': 7,
-            'wcet': 8,
-            'acet': 9,
-            'et_stddev': 10,
-            'base_cpi': 11,
-            'n_instr': 12,
-            'mix': 13,
-            'sdp': 14,
-            'preemption_cost': 15,
-            'followed': 16
+            'task_class': 2,
+            'task_type': 3,
+            'abort': 4,
+            'activation_date': 5,
+            'period': 6,
+            'list_activation_dates': 7,
+            'deadline': 8,
+            'wcet': 9,
+            'acet': 10,
+            'et_stddev': 11,
+            'base_cpi': 12,
+            'n_instr': 13,
+            'mix': 14,
+            'sdp': 15,
+            'preemption_cost': 16,
+            'followed': 17,
+            'nr_crit_levels': 18,
+            'crit_level': 19,
+            'list_wcets': 20,
+            'wcet_deviations': 21
         }
 
         self.refresh_table()
@@ -185,6 +214,14 @@ class TasksTable(QTableWidget):
         self.setItem(row, self._dict_header['name'],
                      QTableWidgetItem(str(task.name)))
 
+        combo = QComboBox()
+        items = ['Generic', 'Mixed-Criticality']
+        combo.addItems(items)
+        combo.setCurrentIndex(combo.findText(task.task_class))
+        combo.currentIndexChanged.connect(
+            lambda x: self._cell_changed(row, self._dict_header['task_class']))
+        self.setCellWidget(row, self._dict_header['task_class'], combo)
+
         combo = QComboBox()
         items = [task_type for task_type in Task.task_types_names]
         combo.addItems(items)
@@ -205,9 +242,16 @@ class TasksTable(QTableWidget):
         self.item(row, self._dict_header['list_activation_dates']) \
             .setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
 
+        self.setItem(row, self._dict_header['list_wcets'],
+                     QTableWidgetItem(
+                         ', '.join(map(str, task.list_wcets))))
+        self.item(row, self._dict_header['list_wcets']) \
+            .setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
+
         for i in ['activation_date', 'period',
                   'deadline', 'wcet', 'base_cpi', 'n_instr', 'mix', 'acet',
-                  'et_stddev', 'preemption_cost']:
+                  'et_stddev', 'preemption_cost', 'nr_crit_levels',
+                  'crit_level', 'wcet_deviations']:
             self.setItem(row, self._dict_header[i],
                          QTableWidgetItem(str(task.__dict__[i])))
             self.item(row, self._dict_header[i]) \
@@ -233,6 +277,7 @@ class TasksTable(QTableWidget):
 
         self._ignore_cell_changed = False
         self._show_period(task, row)
+        self._show_criticality_fields(task, row)
 
     def update_path(self):
         row = 0
@@ -253,7 +298,7 @@ class TasksTable(QTableWidget):
     def _show_period(self, task, row):
         self._ignore_cell_changed = True
 
-        fields = Task.task_types[task.task_type].fields
+        fields = Task.task_types[task.task_class][task.task_type].fields
         for field in ['activation_date', 'list_activation_dates', 'period',
                       'deadline', 'wcet']:
             flags = self.item(row, self._dict_header[field]).flags()
@@ -273,6 +318,34 @@ class TasksTable(QTableWidget):
 
         self._ignore_cell_changed = False
 
+    def _show_criticality_fields(self, task, row):
+        self._ignore_cell_changed = True
+        default_values = {
+            'wcet': '-',
+            'nr_crit_levels': '1',
+            'crit_level': '0',
+            'list_wcets': '-',
+            'wcet_deviations': '-'
+        }
+        fields = Task.task_types[task.task_class][task.task_type].fields
+        for field in ['wcet', 'nr_crit_levels', 'crit_level', 'list_wcets', 'wcet_deviations']:
+            flags = self.item(row, self._dict_header[field]).flags()
+            if field in fields:
+                flags |= Qt.ItemIsEnabled
+                if field in ['list_wcets', 'wcet_deviations']:
+                    self.item(row, self._dict_header[field]).setText(
+                        str(', '.join(
+                            map(str, getattr(task, field)))))
+                else:
+                    self.item(row, self._dict_header[field]).setText(
+                        str(task.__dict__[field]))
+            else:
+                flags &= ~(Qt.ItemIsEnabled)
+                self.item(row, self._dict_header[field]).setText(default_values[field])
+            self.item(row, self._dict_header[field]).setFlags(flags)
+
+        self._ignore_cell_changed = False
+
     def _update_followed_by(self):
         self._ignore_cell_changed = True
         for row, task in enumerate(self._configuration.task_info_list):
@@ -326,6 +399,16 @@ class TasksTable(QTableWidget):
             old_value = str(task.mix)
         elif col == self._dict_header['preemption_cost']:
             old_value = str(task.preemption_cost)
+        elif col == self._dict_header['nr_crit_levels']:
+            old_value = str(task.nr_crit_levels)
+        elif col == self._dict_header['crit_level']:
+            old_value = str(task.crit_level)
+        elif col == self._dict_header['list_wcets']:
+            old_value = ', '.join(
+                map(str, task.list_wcets))
+        elif col == self._dict_header['wcet_deviations']:
+            old_value = ', '.join(
+                map(str, task.wcet_deviations))
         elif col >= len(self._header):
             key = self._custom_fields[col - len(self._header)]
             try:
@@ -345,6 +428,9 @@ class TasksTable(QTableWidget):
                 name = str(self.item(row, col).text()).strip()
                 assert re.match('^[a-zA-Z][a-zA-Z0-9 _-]+$', name)
                 task.name = str(self.item(row, col).text())
+            elif col == self._dict_header['task_class']:
+                task.task_class = str(self.cellWidget(row, col).currentText())
+                self._show_criticality_fields(task, row)
             elif col == self._dict_header['task_type']:
                 task.task_type = str(self.cellWidget(row, col).currentText())
                 self._show_period(task, row)
@@ -405,6 +491,34 @@ class TasksTable(QTableWidget):
                     task.followed_by = int(m.group(1))
                 else:
                     task.followed_by = None
+            elif col == self._dict_header['nr_crit_levels']:
+                nr_crit_levels = int(self.item(row, col).text())
+                assert nr_crit_levels >= 1
+                task.nr_crit_levels = nr_crit_levels
+                wcets = []
+                task.list_wcets = wcets
+                task.wcet = 0
+                self.item(row, self._dict_header['list_wcets']).setText(', '.join(map(str, wcets)))
+                self.item(row, self._dict_header['crit_level']).setText('0')
+            elif col == self._dict_header['crit_level']:
+                crit_level = int(self.item(row, col).text())
+                assert 0 <= crit_level < task.nr_crit_levels
+                task.crit_level = crit_level
+            elif col == self._dict_header['list_wcets']:
+                wcets = list(map(float, self.item(row, col).text().split(',')))
+                nr_crit_levels = task.nr_crit_levels
+                assert nr_crit_levels >= 1
+                assert len(wcets) == nr_crit_levels
+                task.list_wcets = wcets
+                task.wcet = wcets[task.crit_level]
+                self.item(row, col).setText(', '.join(map(str, wcets)))
+            elif col == self._dict_header['wcet_deviations']:
+                wcet_deviations = list(map(float, self.item(row, col).text().split(',')))
+                nr_crit_levels = task.nr_crit_levels
+                assert nr_crit_levels >= 1
+                assert len(wcet_deviations) == nr_crit_levels
+                task.wcet_deviations = wcet_deviations
+                self.item(row, col).setText(', '.join(map(str, wcet_deviations)))
             elif col >= len(self._header):
                 key = self._custom_fields[col - len(self._header)]
                 task.data[key] = convert_function[
diff --git a/simsogui/TaskGenerator.py b/simsogui/TaskGenerator.py
index 4d45c4b..c98d5c8 100644
--- a/simsogui/TaskGenerator.py
+++ b/simsogui/TaskGenerator.py
@@ -1,5 +1,6 @@
 from PyQt5.QtGui import QRegExpValidator
-from PyQt5.QtWidgets import QCheckBox, QComboBox, QDialogButtonBox, QDialog, QDoubleSpinBox, QGroupBox, QHBoxLayout, QLabel, QLineEdit, QMessageBox, QRadioButton, QSlider, QSpinBox, QVBoxLayout, QWidget
+from PyQt5.QtWidgets import QCheckBox, QComboBox, QDialogButtonBox, QDialog, QDoubleSpinBox, QGroupBox, QHBoxLayout, \
+    QLabel, QLineEdit, QMessageBox, QRadioButton, QSlider, QSpinBox, QVBoxLayout, QWidget
 from PyQt5.QtCore import pyqtSignal, QRegExp
 from PyQt5 import QtCore, QtWidgets
 from simso.generator.task_generator import StaffordRandFixedSum, \
@@ -75,11 +76,32 @@ class TaskGeneratorDialog(QDialog):
         QDialog.__init__(self)
         self.layout = QVBoxLayout(self)
         self.taskset = None
+        self.nbprocessors = nbprocessors
 
         # Utilizations:
         vbox_utilizations = QVBoxLayout()
         group = QGroupBox("Task Utilizations:")
 
+        hbox_class = QHBoxLayout()
+        hbox_class.addWidget(QLabel("Task class:", self))
+        self.comboTaskClass = QComboBox()
+        self.comboTaskClass.addItem("Generic")
+        self.comboTaskClass.addItem("Mixed-Criticality")
+        self.comboTaskClass.currentIndexChanged.connect(self.class_changed)
+        hbox_class.addWidget(self.comboTaskClass)
+        vbox_utilizations.addLayout(hbox_class)
+
+        # Number of criticality levels:
+        self.hbox_nr_crit_levels = QHBoxLayout()
+        self.spin_nr_crit_levels = QSpinBox(self)
+        self.spin_nr_crit_levels.setMinimum(2)
+        self.spin_nr_crit_levels.setMaximum(10)  # That's arbitrary.
+        self.hbox_nr_crit_levels.addWidget(QLabel("Number of MC levels: ", self))
+        self.hbox_nr_crit_levels.addStretch(1)
+        self.hbox_nr_crit_levels.addWidget(self.spin_nr_crit_levels)
+        self.spin_nr_crit_levels.valueChanged.connect(self.nr_crit_levels_changed)
+        vbox_utilizations.addLayout(self.hbox_nr_crit_levels)
+
         hbox = QHBoxLayout()
         hbox.addWidget(QLabel("Generator:", self))
         self.comboGenerator = QComboBox()
@@ -91,7 +113,7 @@ class TaskGeneratorDialog(QDialog):
         vbox_utilizations.addLayout(hbox)
 
         # Load slider + spinner:
-        hbox_load = QHBoxLayout()
+        self.hbox_load = QHBoxLayout()
         sld = _DoubleSlider(QtCore.Qt.Horizontal, self)
         sld.setMinimum(0)
         sld.setMaximum(32)
@@ -99,13 +121,13 @@ class TaskGeneratorDialog(QDialog):
         self.spin_load.setMinimum(0)
         self.spin_load.setMaximum(32)
         self.spin_load.setSingleStep(0.1)
-        hbox_load.addWidget(QLabel("Total utilization: ", self))
-        hbox_load.addWidget(sld)
-        hbox_load.addWidget(self.spin_load)
+        self.hbox_load.addWidget(QLabel("Total utilization: ", self))
+        self.hbox_load.addWidget(sld)
+        self.hbox_load.addWidget(self.spin_load)
         sld.doubleValueChanged.connect(self.spin_load.setValue)
         self.spin_load.valueChanged.connect(sld.setValue)
-        self.spin_load.setValue(nbprocessors / 2.)
-        vbox_utilizations.addLayout(hbox_load)
+        self.spin_load.setValue(self.nbprocessors / 2.)
+        vbox_utilizations.addLayout(self.hbox_load)
 
         # Number of periodic tasks:
         self.hbox_tasks = QHBoxLayout()
@@ -128,6 +150,14 @@ class TaskGeneratorDialog(QDialog):
         self.hbox_sporadic_tasks.addWidget(self.spin_sporadic_tasks)
         vbox_utilizations.addLayout(self.hbox_sporadic_tasks)
 
+        self.mc_vbox_utilizations = QVBoxLayout()
+        vbox_utilizations.addLayout(self.mc_vbox_utilizations)
+
+        self.mc_vbox_periodic_tasks = QVBoxLayout()
+        vbox_utilizations.addLayout(self.mc_vbox_periodic_tasks)
+        self.mc_vbox_sporadic_tasks = QVBoxLayout()
+        vbox_utilizations.addLayout(self.mc_vbox_sporadic_tasks)
+
         # Min / Max utilizations
         self.hbox_utilizations = QHBoxLayout()
         self.hbox_utilizations.addWidget(QLabel("Min/Max utilizations: ",
@@ -187,6 +217,93 @@ class TaskGeneratorDialog(QDialog):
         self.layout.addWidget(buttonBox)
 
         self.show_randfixedsum_options()
+        self.show_generic_options()
+
+    def class_changed(self, value):
+        if value == 1:
+            self.show_mixed_criticality_options()
+        else:
+            self.show_generic_options()
+
+    def nr_crit_levels_changed(self, value):
+        for i in range(self.mc_vbox_utilizations.count()):
+            if self.mc_vbox_utilizations.itemAt(i).widget():
+                self.mc_vbox_utilizations.itemAt(i).widget().deleteLater()
+            if self.mc_vbox_utilizations.itemAt(i).layout():
+                for j in range(self.mc_vbox_utilizations.itemAt(i).layout().count()):
+                    if self.mc_vbox_utilizations.itemAt(i).layout().itemAt(j).widget():
+                        self.mc_vbox_utilizations.itemAt(i).layout().itemAt(j).widget().deleteLater()
+        for i in reversed(range(self.mc_vbox_periodic_tasks.count())):
+            if self.mc_vbox_periodic_tasks.itemAt(i).widget():
+                self.mc_vbox_periodic_tasks.itemAt(i).widget().deleteLater()
+            if self.mc_vbox_periodic_tasks.itemAt(i).layout():
+                for j in range(self.mc_vbox_periodic_tasks.itemAt(i).layout().count()):
+                    if self.mc_vbox_periodic_tasks.itemAt(i).layout().itemAt(j).widget():
+                        self.mc_vbox_periodic_tasks.itemAt(i).layout().itemAt(j).widget().deleteLater()
+        for i in range(self.mc_vbox_sporadic_tasks.count()):
+            if self.mc_vbox_sporadic_tasks.itemAt(i).widget():
+                self.mc_vbox_sporadic_tasks.itemAt(i).widget().deleteLater()
+            if self.mc_vbox_sporadic_tasks.itemAt(i).layout():
+                for j in range(self.mc_vbox_sporadic_tasks.itemAt(i).layout().count()):
+                    if self.mc_vbox_sporadic_tasks.itemAt(i).layout().itemAt(j).widget():
+                        self.mc_vbox_sporadic_tasks.itemAt(i).layout().itemAt(j).widget().deleteLater()
+
+        self.mc_vbox_periodic_tasks.addWidget(
+            QLabel("Number of periodic tasks:", self))
+        self.mc_vbox_sporadic_tasks.addWidget(
+            QLabel("Number of sporadic tasks:", self))
+        for i in range(value):
+            load_name = "hbox_mc_load_{}".format(i)
+            setattr(self, load_name, QHBoxLayout())
+            load = getattr(self, load_name)
+
+            spin_load_name = "spin_mc_load_{}".format(i)
+            setattr(self, spin_load_name, QDoubleSpinBox(self))
+            spin_load = getattr(self, spin_load_name)
+
+            sld = _DoubleSlider(QtCore.Qt.Horizontal, self)
+            sld.setMinimum(0)
+            sld.setMaximum(32)
+            spin_load.setMinimum(0)
+            spin_load.setMaximum(32)
+            spin_load.setSingleStep(0.1)
+            load.addWidget(QLabel("Total utilization (MC level {}): ".format(i), self))
+            load.addWidget(sld)
+            load.addWidget(spin_load)
+            sld.doubleValueChanged.connect(spin_load.setValue)
+            spin_load.valueChanged.connect(sld.setValue)
+            spin_load.setValue(self.nbprocessors / 2.)
+            self.mc_vbox_utilizations.addLayout(load)
+
+            hbox_name = "hbox_mc_tasks_{}".format(i)
+            setattr(self, hbox_name, QHBoxLayout())
+            hbox = getattr(self, hbox_name)
+
+            spin_name = "spin_mc_tasks_{}".format(i)
+            setattr(self, spin_name, QSpinBox(self))
+            spin_tasks = getattr(self, spin_name)
+
+            spin_tasks.setMinimum(0)
+            spin_tasks.setMaximum(999)  # That's arbitrary.
+            hbox.addWidget(QLabel("MC level: {}".format(i), self))
+            hbox.addStretch(1)
+            hbox.addWidget(spin_tasks)
+            self.mc_vbox_periodic_tasks.addLayout(hbox)
+
+            sporadic_hbox_name = "hbox_mc_sporadic_tasks_{}".format(i)
+            setattr(self, sporadic_hbox_name, QHBoxLayout())
+            sporadic_hbox = getattr(self, sporadic_hbox_name)
+
+            sporadic_spin_name = "spin_mc_sporadic_tasks_{}".format(i)
+            setattr(self, sporadic_spin_name, QSpinBox(self))
+            sporadic_spin = getattr(self, sporadic_spin_name)
+
+            sporadic_spin.setMinimum(0)
+            sporadic_spin.setMaximum(999)  # That's arbitrary.
+            sporadic_hbox.addWidget(QLabel("MC level: {}".format(i), self))
+            sporadic_hbox.addStretch(1)
+            sporadic_hbox.addWidget(sporadic_spin)
+            self.mc_vbox_sporadic_tasks.addLayout(sporadic_hbox)
 
     def generator_changed(self, value):
         if value == 2:
@@ -194,6 +311,58 @@ class TaskGeneratorDialog(QDialog):
         else:
             self.show_randfixedsum_options()
 
+    def get_nr_crit_levels(self):
+        return self.spin_nr_crit_levels.value()
+
+    def get_task_class(self):
+        return self.comboTaskClass.currentText()
+
+    def show_mixed_criticality_options(self):
+        for i in range(self.hbox_nr_crit_levels.count()):
+            if self.hbox_nr_crit_levels.itemAt(i).widget():
+                self.hbox_nr_crit_levels.itemAt(i).widget().show()
+        for i in range(self.mc_vbox_periodic_tasks.count()):
+            if self.mc_vbox_periodic_tasks.itemAt(i).widget():
+                self.mc_vbox_periodic_tasks.itemAt(i).widget().show()
+        for i in range(self.mc_vbox_sporadic_tasks.count()):
+            if self.mc_vbox_sporadic_tasks.itemAt(i).widget():
+                self.mc_vbox_sporadic_tasks.itemAt(i).widget().show()
+        for i in range(self.mc_vbox_utilizations.count()):
+            if self.mc_vbox_utilizations.itemAt(i).widget():
+                self.mc_vbox_utilizations.itemAt(i).widget().show()
+        for i in range(self.hbox_load.count()):
+            if self.hbox_load.itemAt(i).widget():
+                self.hbox_load.itemAt(i).widget().hide()
+        for i in range(self.hbox_tasks.count()):
+            if self.hbox_tasks.itemAt(i).widget():
+                self.hbox_tasks.itemAt(i).widget().hide()
+        for i in range(self.hbox_sporadic_tasks.count()):
+            if self.hbox_sporadic_tasks.itemAt(i).widget():
+                self.hbox_sporadic_tasks.itemAt(i).widget().hide()
+
+    def show_generic_options(self):
+        for i in range(self.hbox_nr_crit_levels.count()):
+            if self.hbox_nr_crit_levels.itemAt(i).widget():
+                self.hbox_nr_crit_levels.itemAt(i).widget().hide()
+        for i in range(self.mc_vbox_periodic_tasks.count()):
+            if self.mc_vbox_periodic_tasks.itemAt(i).widget():
+                self.mc_vbox_periodic_tasks.itemAt(i).widget().hide()
+        for i in range(self.mc_vbox_sporadic_tasks.count()):
+            if self.mc_vbox_sporadic_tasks.itemAt(i).widget():
+                self.mc_vbox_sporadic_tasks.itemAt(i).widget().hide()
+        for i in range(self.mc_vbox_utilizations.count()):
+            if self.mc_vbox_utilizations.itemAt(i).widget():
+                self.mc_vbox_utilizations.itemAt(i).widget().hide()
+        for i in range(self.hbox_load.count()):
+            if self.hbox_load.itemAt(i).widget():
+                self.hbox_load.itemAt(i).widget().show()
+        for i in range(self.hbox_tasks.count()):
+            if self.hbox_tasks.itemAt(i).widget():
+                self.hbox_tasks.itemAt(i).widget().show()
+        for i in range(self.hbox_sporadic_tasks.count()):
+            if self.hbox_sporadic_tasks.itemAt(i).widget():
+                self.hbox_sporadic_tasks.itemAt(i).widget().show()
+
     def show_randfixedsum_options(self):
         for i in range(self.hbox_utilizations.count()):
             self.hbox_utilizations.itemAt(i).widget().hide()
@@ -221,15 +390,43 @@ class TaskGeneratorDialog(QDialog):
     def get_max_utilization(self):
         return self.interval_utilization.getMax()
 
-    def generate(self):
-
-        n = self.get_nb_tasks()
-        if (n == 0):
-            QMessageBox.warning(
-                    self, "Generation failed",
-                    "Please check the utilization and the number of tasks.")
-            return
-
+    def get_mc_utilizations(self):
+        utilizations = []
+        for i in range(self.mc_vbox_utilizations.count()):
+            if self.mc_vbox_utilizations.itemAt(i).layout():
+                inner_layout = self.mc_vbox_utilizations.itemAt(i).layout()
+                for j in range(inner_layout.count()):
+                    if inner_layout.itemAt(j).widget() and type(inner_layout.itemAt(j).widget()) == QDoubleSpinBox:
+                        utilizations.append(inner_layout.itemAt(j).widget().value())
+
+        return utilizations
+
+    def get_nr_mc_periodic_tasks(self):
+        nr_tasks = []
+        for i in range(self.mc_vbox_periodic_tasks.count()):
+            if self.mc_vbox_periodic_tasks.itemAt(i).layout():
+                inner_layout = self.mc_vbox_periodic_tasks.itemAt(i).layout()
+                for j in range(inner_layout.count()):
+                    if inner_layout.itemAt(j).widget() and type(inner_layout.itemAt(j).widget()) == QSpinBox:
+                        nr_tasks.append(inner_layout.itemAt(j).widget().value())
+
+        return nr_tasks
+
+    def get_nr_mc_sporadic_tasks(self):
+        nr_tasks = []
+        for i in range(self.mc_vbox_sporadic_tasks.count()):
+            if self.mc_vbox_sporadic_tasks.itemAt(i).layout():
+                inner_layout = self.mc_vbox_sporadic_tasks.itemAt(i).layout()
+                for j in range(inner_layout.count()):
+                    if inner_layout.itemAt(j).widget() and type(inner_layout.itemAt(j).widget()) == QSpinBox:
+                        nr_tasks.append(inner_layout.itemAt(j).widget().value())
+
+        return nr_tasks
+
+    def get_mc_nb_tasks(self):
+        return sum(self.get_nr_mc_periodic_tasks()) + sum(self.get_nr_mc_sporadic_tasks())
+
+    def generate_taskset(self, n):
         if self.comboGenerator.currentIndex() == 0:
             u = StaffordRandFixedSum(n, self.get_utilization(), 1)
         elif self.comboGenerator.currentIndex() == 1:
@@ -248,7 +445,7 @@ class TaskGeneratorDialog(QDialog):
                                        p_types[3])
         else:
             p = gen_periods_discrete(n, 1, p_types[1])
-            
+
         if u and p:
             self.taskset = gen_tasksets(u, p)[0]
             self.accept()
@@ -261,6 +458,61 @@ class TaskGeneratorDialog(QDialog):
                 self, "Generation failed",
                 "Pleache check the periods.")
 
+    def generate_mc_taskset(self, u, n, crit_level=None):
+        if self.comboGenerator.currentIndex() == 0:
+            u = StaffordRandFixedSum(n, u, 1)
+        elif self.comboGenerator.currentIndex() == 1:
+            u = UUniFastDiscard(n, u, 1)
+
+        p_types = self.get_periods()
+        if p_types[0] == "unif":
+            p = gen_periods_uniform(n, 1, p_types[1], p_types[2], p_types[3])
+        elif p_types[0] == "lunif":
+            p = gen_periods_loguniform(n, 1, p_types[1], p_types[2],
+                                       p_types[3])
+        else:
+            p = gen_periods_discrete(n, 1, p_types[1])
+
+        if u and p:
+            return gen_tasksets(u, p, crit_level)[0]
+        elif not u:
+            QMessageBox.warning(
+                self, "Generation failed",
+                "Please check the utilization and the number of tasks.")
+        else:
+            QMessageBox.warning(
+                self, "Generation failed",
+                "Please check the periods.")
+
+    def generate(self):
+        if self.get_task_class() == "Generic":
+            n = self.get_nb_tasks()
+            if (n == 0):
+                QMessageBox.warning(
+                    self, "Generation failed",
+                    "Please check the utilization and the number of tasks.")
+                return
+
+            self.generate_taskset(n)
+        else:
+            mc_periodic_tasks = self.get_nr_mc_periodic_tasks()
+            mc_sporadic_tasks = self.get_nr_mc_sporadic_tasks()
+            mc_utilizations = self.get_mc_utilizations()
+            if sum(mc_periodic_tasks) + sum(mc_sporadic_tasks) == 0:
+                QMessageBox.warning(
+                    self, "Generation failed",
+                    "Please check the utilization and the number of tasks.")
+                return
+
+            for i in range(self.get_nr_crit_levels()):
+                nb_tasks = mc_periodic_tasks[i] + mc_sporadic_tasks[i]
+                if not self.taskset:
+                    self.taskset = self.generate_mc_taskset(mc_utilizations[i], nb_tasks, i)
+                else:
+                    self.taskset.extend(self.generate_mc_taskset(mc_utilizations[i], nb_tasks, i))
+
+            self.accept()
+
     def get_nb_tasks(self):
         return self.spin_tasks.value() + self.spin_sporadic_tasks.value()
 
